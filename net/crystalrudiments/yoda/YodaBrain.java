/**
 * YodaBrain
 * Entry for Artifical Intelligence N.V. (Ai) - Challenge:
 * A program that is supposed to learn how to play a game without
 * knowing the rules. For info visit: <A HREF=http://www.a-i.com>
 * www.a-i.com</A>
 * <BR>
 * "Size matters not! Judge me by my size, do you?" 
 * Yoda--The Empire Strikes Back 
 *
 * Record: -2001.9.10- finished Neuro-1.0.0
 *
 * @author <A HREF="http://www.adamldavis.com">Adam L. Davis</A>
 * @version 1.0 Sept. 7, 2001
 */
package net.crystalrudiments.yoda;

import java.util.*;

import net.crystalrudiments.neurons.Neuro;

public class YodaBrain implements YodaConstants
{
	/** Initial size of symbols Vector. */
	private static final int IN_SIZE = 40;
	private static final int IN_CHANGE = 40;
	
	/* When a new game begins, the judge program will inform each player program of 
	the set of possible moves in the game. Each move is represented as a string, and 
	the set will contain between two and eighty strings. For example, one game may 
	have only three valid moves: "rock", "paper" and "scissors". Other games may have 
	more, such as the twenty-six uppercase alphabetic characters, or the ten digits.
		Once the game is underway, one of three things may happen. Your program may 
	observe a move on its input channel, it may be asked to generate a move on its 
	output channel, or it may be informed of its score. These things may happen in 
	any order, so, for example, your program may observe three moves in a row, be 
	asked to generate two moves, observe one more move, and then be told its score. 
	This sequence will make sense in the context of the game, which, of course, is 
	only known to the judge program. Furthermore, moves which your program observes 
	on its input channel may or may not have been generated by an opponent.
	*/
	/** Holds the symbol strings.*/
	private Vector symbols;
	
	/* THE BRAIN VARIABLES. */
	//(0.Dumb)
	/** Points for each symbol. */
	private byte[] pnt = new byte[MAX_SYMBOL];
	
	//(1.Simple)
	/** Each number corresponds to a symbol index (0-79).*/
	private byte[] simple = new byte[MAX_SYMBOL];
	
	//(2.Pattern)
	/** Holds objects of type Move. */
	private Vector moves; 
	
	//private byte[][][] p = new byte[1000][2][];
	//eg. p[n]={{a1,a2...},{b1,b2...}} where n=any number; 
	// and {b1,b2...} is proper response to {a1,a2...}
	
	//(3.Smart)
	/** Logic-web, holds objects of type Neuro.*/
	private Vector ns;
	
	/** Fuzzy logic (weight given to each level of complexity). */
	//as one level fails it moves to the next level up.
	private float[] complex = {80f, 15f, 4f, 1f};
	
	/** Total weight in "complex". */
	private static final float MAX_COMPLEX = 100f;
	
	private static final byte DUMB=0; //output = 'a'
	private static final byte SIMPLE=1; //output = f(input)
	private static final byte PATTERN=2; //follows patterns
	private static final byte SMART=3; //complex rules, nueral net.
	
	/**
	* Default Constructor
	*/
	public YodaBrain()
	{
		symbols = new Vector(IN_SIZE, IN_CHANGE);
	}
	/**
	* Adds a symbol to symbols.
	*/
	public void addSymbol(String str)
	{
		symbols.add(str);
		Neuro.setNum(symbols.size());
	}
	/**
	* Returns the output for one play of the game.
	*/
	public String play() 
	{
		String str="";
		if (symbols.size()==0) {
			Yoda.error("play: No symbols!");
		}
		else {
			//here do all of the thinking...
			int num = randomMove();
			str = (String) symbols.elementAt(num);
		}
		
		return str;
	}
	/**
	* Returns a random move (by int).
	*/
	public int randomMove()
	{
		return (int)(Math.random()*symbols.size());
	}
	
	/**
	* Processes input.
	*/
	public void giveInput(String str)
	{
		//give INput
	}
	/**
	* Processes score.
	*/
	public void giveScore(double d)
	{
		//getscore
	}
	
	/**
	* Main method. Run by java compiler.
	*/
	public static void main(String args[])
	{
		YodaBrain y = new YodaBrain();
		y.addSymbol("a");
		y.addSymbol("b");
		y.addSymbol("c");
		System.out.println("Game: a,b,c");
		for (int i=0; i<10; i++)
		{
			System.out.println("@command play");
			System.out.println(y.play());
		}
	}//main
} //YodaBrain